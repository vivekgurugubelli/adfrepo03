{
	"name": "df_scd_type1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_Sql_Server_source",
						"type": "LinkedServiceReference"
					},
					"name": "srcCustomer"
				},
				{
					"linkedService": {
						"referenceName": "SqlServer1",
						"type": "LinkedServiceReference"
					},
					"name": "trgCustomer"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "SqlServer1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "SqlServer1",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "srcSelect"
				},
				{
					"name": "trgSelect"
				},
				{
					"name": "DoesNotExist"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "filter2"
				},
				{
					"name": "select2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customerid as integer,",
				"          customername as string,",
				"          location as string,",
				"          sales as decimal(19,4)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select \\ncustomerid,\\ncustomername,\\nlocation,\\nsales\\nfrom customer',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> srcCustomer",
				"source(output(",
				"          customerid as integer,",
				"          customername as string,",
				"          location as string,",
				"          sales as decimal(19,4)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select \\ncustomerid,\\ncustomername,\\nlocation,\\nsales\\nfrom customer',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> trgCustomer",
				"srcCustomer select(mapColumn(",
				"          src_customerid = customerid,",
				"          src_customername = customername,",
				"          src_location = location,",
				"          src_sales = sales",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> srcSelect",
				"trgCustomer select(mapColumn(",
				"          trg_customerid = customerid,",
				"          trg_customername = customername,",
				"          trg_location = location,",
				"          trg_sales = sales",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> trgSelect",
				"srcSelect, trgSelect exists(src_customerid == trg_customerid,",
				"     negate:true,",
				"     broadcast: 'auto')~> DoesNotExist",
				"DoesNotExist derive(flag = 'inserted') ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          customerid = src_customerid,",
				"          customername = src_customername,",
				"          location = src_location,",
				"          sales = src_sales,",
				"          flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"srcSelect, trgSelect lookup(src_customerid == trg_customerid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(not(isNull(trg_customerid))) ~> filter1",
				"filter1 derive(isChangedRecds = iif(src_customername!=trg_customername||src_location!=trg_location||src_sales!=trg_sales,'Yes','No'),",
				"          flag = 'updated') ~> derivedColumn2",
				"derivedColumn2 filter(isChangedRecds=='Yes') ~> filter2",
				"filter2 select(mapColumn(",
				"          customerid = src_customerid,",
				"          customername = src_customername,",
				"          location = src_location,",
				"          sales = src_sales,",
				"          flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 alterRow(updateIf(1==1)) ~> alterRow1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'customer',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'customer',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['customerid'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}